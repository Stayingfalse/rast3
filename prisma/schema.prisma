generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
  @@index([createdById], map: "Post_createdById_fkey")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String?              @unique
  emailVerified        DateTime?
  image                String?
  amazonWishlistUrl    String?
  wishlistViews        Int                  @default(0)
  departmentId         String?
  domain               String?
  firstName            String?
  lastName             String?
  profileCompleted     Boolean              @default(false)
  profileCompletedAt   DateTime?
  workEmail            String?              @unique
  adminLevel           AdminLevel           @default(USER)
  adminScope           String?
  accounts             Account[]
  createdAuthProviders AuthProvider[]
  createdDomains       Domain[]
  moderatedKudos       Kudos[]              @relation("KudosModerator")
  kudosGiven           Kudos[]
  posts                Post[]
  purchases            Purchase[]
  sessions             Session[]
  department           Department?          @relation(fields: [departmentId], references: [id])
  assignedLinks        WishlistAssignment[] @relation("AssignedUser")
  ownedWishlist        WishlistAssignment[] @relation("WishlistOwner")
  reports              WishlistReport[]

  @@index([departmentId], map: "User_departmentId_fkey")
}

model Department {
  id        String   @id @default(cuid())
  name      String
  domain    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@unique([name, domain])
  @@index([domain])
}

model Domain {
  id          String   @id @default(cuid())
  name        String   @unique
  enabled     Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [id])

  @@index([name])
  @@index([enabled])
  @@index([createdById], map: "Domain_createdById_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WishlistAssignment {
  id                String           @id @default(cuid())
  assignedUserId    String
  wishlistOwnerId   String
  assignedAt        DateTime         @default(now())
  isActive          Boolean          @default(true)
  isCrossDepartment Boolean          @default(false)
  purchases         Purchase?
  assignedUser      User             @relation("AssignedUser", fields: [assignedUserId], references: [id], onDelete: Cascade)
  wishlistOwner     User             @relation("WishlistOwner", fields: [wishlistOwnerId], references: [id], onDelete: Cascade)
  reports           WishlistReport[]

  @@unique([assignedUserId, wishlistOwnerId])
  @@index([assignedUserId])
  @@index([wishlistOwnerId])
  @@index([isActive])
}

model Purchase {
  id                   String             @id @default(cuid())
  userId               String
  wishlistAssignmentId String             @unique
  purchasedAt          DateTime           @default(now())
  notes                String?
  kudos                Kudos[]
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  wishlistAssignment   WishlistAssignment @relation(fields: [wishlistAssignmentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([wishlistAssignmentId])
}

model WishlistReport {
  id                   String             @id @default(cuid())
  userId               String
  wishlistAssignmentId String
  reportType           ReportType
  description          String?
  reportedAt           DateTime           @default(now())
  resolved             Boolean            @default(false)
  resolvedAt           DateTime?
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  wishlistAssignment   WishlistAssignment @relation(fields: [wishlistAssignmentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([wishlistAssignmentId])
  @@index([reportType])
  @@index([resolved])
}

model Kudos {
  id          String    @id @default(cuid())
  userId      String
  purchaseId  String?
  message     String    @db.Text
  images      String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hidden      Boolean   @default(false)
  moderatedAt DateTime?
  moderatedBy String?
  moderator   User?     @relation("KudosModerator", fields: [moderatedBy], references: [id])
  purchase    Purchase? @relation(fields: [purchaseId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([purchaseId])
  @@index([hidden])
  @@index([moderatedBy])
}

model AuthProvider {
  id              String   @id @default(cuid())
  name            String   @unique
  displayName     String
  clientId        String?
  clientSecret    String?
  enabled         Boolean  @default(false)
  isEmailProvider Boolean  @default(false)
  emailConfig     Json?    // For email provider specific settings
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String
  creator         User     @relation(fields: [createdBy], references: [id])

  @@index([enabled])
  @@index([createdBy])
}

enum AdminLevel {
  SITE
  DOMAIN
  DEPARTMENT
  USER
}

enum ReportType {
  NO_ITEMS
  DOESNT_EXIST
  NO_ADDRESS
  OTHER
}
